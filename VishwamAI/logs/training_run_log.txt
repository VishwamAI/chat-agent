nohup: ignoring input
2024-06-24 00:40:20.757832: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-24 00:40:21.054425: I external/local_tsl/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used.
2024-06-24 00:40:22.141166: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-06-24 00:40:24.190064: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-06-24 00:40:30,037 - INFO - Unable to initialize backend 'cuda': 
2024-06-24 00:40:30,038 - INFO - Unable to initialize backend 'rocm': module 'jaxlib.xla_extension' has no attribute 'GpuAllocatorConfig'
2024-06-24 00:40:30,059 - INFO - Unable to initialize backend 'tpu': INTERNAL: Failed to open libtpu.so: libtpu.so: cannot open shared object file: No such file or directory
Input data: Tensor("cond/strided_slice:0", shape=(), dtype=string)
Tokenized data: Tensor("cond/Squeeze:0", shape=(32,), dtype=int32)
Padded data: Tensor("cond/Pad:0", shape=(32,), dtype=int32)
Label: Tensor("cond/None_Lookup/LookupTableFindV2:0", shape=(), dtype=int32)
Input data: Tensor("cond/strided_slice:0", shape=(), dtype=string)
Tokenized data: Tensor("cond/Squeeze:0", shape=(32,), dtype=int32)
Padded data: Tensor("cond/Pad:0", shape=(32,), dtype=int32)
Label: Tensor("cond/None_Lookup/LookupTableFindV2:0", shape=(), dtype=int32)
Input data: Tensor("cond/strided_slice:0", shape=(), dtype=string)
Tokenized data: Tensor("cond/Squeeze:0", shape=(32,), dtype=int32)
Padded data: Tensor("cond/Pad:0", shape=(32,), dtype=int32)
Label: Tensor("cond/None_Lookup/LookupTableFindV2:0", shape=(), dtype=int32)
Input data: Tensor("cond/strided_slice:0", shape=(), dtype=string)
Tokenized data: Tensor("cond/Squeeze:0", shape=(32,), dtype=int32)
Padded data: Tensor("cond/Pad:0", shape=(32,), dtype=int32)
Label: Tensor("cond/None_Lookup/LookupTableFindV2:0", shape=(), dtype=int32)
Input data: Tensor("cond/strided_slice:0", shape=(), dtype=string)
Tokenized data: Tensor("cond/Squeeze:0", shape=(32,), dtype=int32)
Padded data: Tensor("cond/Pad:0", shape=(32,), dtype=int32)
Label: Tensor("cond/None_Lookup/LookupTableFindV2:0", shape=(), dtype=int32)
Input data: Tensor("cond/strided_slice:0", shape=(), dtype=string)
Tokenized data: Tensor("cond/Squeeze:0", shape=(32,), dtype=int32)
Padded data: Tensor("cond/Pad:0", shape=(32,), dtype=int32)
Label: Tensor("cond/None_Lookup/LookupTableFindV2:0", shape=(), dtype=int32)
Input data: Tensor("cond/strided_slice:0", shape=(), dtype=string)
Tokenized data: Tensor("cond/Squeeze:0", shape=(32,), dtype=int32)
Padded data: Tensor("cond/Pad:0", shape=(32,), dtype=int32)
Label: Tensor("cond/None_Lookup/LookupTableFindV2:0", shape=(), dtype=int32)
Input data: Tensor("cond/strided_slice:0", shape=(), dtype=string)
Tokenized data: Tensor("cond/Squeeze:0", shape=(32,), dtype=int32)
Padded data: Tensor("cond/Pad:0", shape=(32,), dtype=int32)
Label: Tensor("cond/None_Lookup/LookupTableFindV2:0", shape=(), dtype=int32)
Input data: Tensor("cond/strided_slice:0", shape=(), dtype=string)
Tokenized data: Tensor("cond/Squeeze:0", shape=(32,), dtype=int32)
Padded data: Tensor("cond/Pad:0", shape=(32,), dtype=int32)
Label: Tensor("cond/None_Lookup/LookupTableFindV2:0", shape=(), dtype=int32)
Input data: Tensor("cond/strided_slice:0", shape=(), dtype=string)
Tokenized data: Tensor("cond/Squeeze:0", shape=(32,), dtype=int32)
Padded data: Tensor("cond/Pad:0", shape=(32,), dtype=int32)
Label: Tensor("cond/None_Lookup/LookupTableFindV2:0", shape=(), dtype=int32)
Input data: Tensor("cond/strided_slice:0", shape=(), dtype=string)
Tokenized data: Tensor("cond/Squeeze:0", shape=(32,), dtype=int32)
Padded data: Tensor("cond/Pad:0", shape=(32,), dtype=int32)
Label: Tensor("cond/None_Lookup/LookupTableFindV2:0", shape=(), dtype=int32)
Input data: Tensor("cond/strided_slice:0", shape=(), dtype=string)
Tokenized data: Tensor("cond/Squeeze:0", shape=(32,), dtype=int32)
Padded data: Tensor("cond/Pad:0", shape=(32,), dtype=int32)
Label: Tensor("cond/None_Lookup/LookupTableFindV2:0", shape=(), dtype=int32)
Data type of inputs after conversion: <dtype: 'int32'>
Data type of inputs before embedding layer: <dtype: 'int32'>
Data type of inputs after conversion to int32: <dtype: 'int32'>
Data type of embedded inputs after transformer apply: float32
Shape of expert_inputs: (8, 32)
